#Functions
'''A function is a bl.ock of code which only runs when it is called. You can pass data, known as parameter, into a funtion. A function can get data as a result
#Creating a Function
#In python a function is created using the def keyword
def my_function ():
  print ("Hello from a function")

#Calling a function
#To call a function, use the function name followed by parenthesis
def my_function ():
  print ("Hello from a function")
my_function()

#Example
def my_function (fname):
  print(fname + " Joaquin")
my_function ("Pizza")
# PARAMETERS OR ARGUMENTS
#The terms parameter and argument can be used for the same thing : information that are passed into a function/ excecuted into a function
# A parameter is the variable listed inside the parenthesis in the function definition
# An argument is the value that is sent to the function  when it's called
def my_function (fname, lname):
  print(fname+ " " + lname)
my_function("Carlos", "Campuzano")'''
# Python Class
# To create a class, use keyword class
# Create a class named MyClass, with a property named x:
class MyClass:
  x = 5

#Create an Object
#We can use the class name MyClass to create an object
#Create an object named g1 , and print the value of x:
p1 = MyClass()
print (p1.x)
#The _init_() Function

# Use the _init_() Function to assign values for name and age :

#Example Create a class named Person, use the _init_() function to assign values for name and age:
class Person:
  def _init_(self, name, age):
    self.name = name
    self.age = age
p1 = Person("john", 36)
print (p1.name)
print (p1.age)
# Note The _init_() function is called automatically every time  the class is being used to create a new object
# Python Inheritance
# Inheritance allows us to define a class that inherit all the methods and properties from another class
# Parent class: is the class being inherited from, also called base class
#Child class is: the class that inherits from another class, also called derived class
#Any class can be parent, so syntax is the same as creating other class
#Ex: create a class named Person, with firstname and lastname properties, and a printname method:
class Person: # Parent Class
  def _init_ (self, fname, lname):
    self.firstname = fname
    self.lastname= lname
  def printname (self):
    print (self.firstname, self.lastname)
# Use the Person class to create an object, and then execute the printname method
x = Person ("John", "Doe")
x.printname()
#Child class
# To create a a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class
#Ex: Assign: Create a class named Student, which will inherit the properties and methods from the Person class
class Student(Person):
  pass
#Ex: Use the Student class to create and object, and then execute the printname method
  x = Student ("Mike","Olsen")
  x.printname()
